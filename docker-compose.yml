version: 3.2.47

services:
  backend:
    container_name: Django
    build:
      context: ./backend/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend/service/:/service
    environment:
      - DB_HOST=database
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass
    command: >
      sh -c
      "python manage.py makemigrations
      &&
      python manage.py migrate
      &&
      gunicorn --bind 0.0.0.0:8000 service.wsgi:application"
    depends_on:
      - database
  
  database:
    container_name: Postgres
    image: postgres:14-alpine3.17
    environment:
      - POSTGRES_DB=dbname
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=pass

  frontend:
    container_name: Vue
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/app
#    command: >
#      sh -c "npm run build"
#      sh -c "npm run serve -- --port 8081"
    ports:
      - '8081:8081'
    depends_on:
      - backend

  redis:
    container_name: Redis
    image: redis:7.0.5-alpine3.17
    hostname: redis

  worker:
    container_name: Celery
    build:
      context: ./backend/
    hostname: worker
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./backend/service/:/service
      - static_data:/service/static
    environment:
      - DB_HOST=database
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass
    links:
      - redis
    depends_on:
      - redis
      - database

  flower:
    container_name: Flower
    build:
      context: ./backend/
    hostname: flower
    entrypoint: celery
    command: -A celery_app.app flower
    volumes:
      - ./backend/service/:/service
    links:
      - redis
    depends_on:
      - redis
    ports:
      - "5555:5555"
  nginx:
    container_name: Nginx
    image: nginx:1.21.0-alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/loggs:/etc/nginx/loggs
      - static_data:/service/static
      - ./frontend/dist/:/etc/dist/
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
volumes:
  static_data: