# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with an ID"
interface Node {
    "The ID of the object"
    id: ID!
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Query {
    queues(after: String, before: String, dateActivation: DateTime, dateCreation: DateTime, first: Int, id: ID, isActive: Boolean, last: Int, name: String, offset: Int, owner: ID, ownerId: Int, userId: Int, users: ID): QueueTypeConnection
}

type QueueType implements Node {
    dateActivation: DateTime!
    dateCreation: DateTime!
    "The ID of the object"
    id: ID!
    isActive: Boolean!
    name: String!
    owner: UserType!
    users(after: String, before: String, dateJoined: DateTime, first: Int, last: Int, offset: Int, queue: ID, user: ID): UserQueueRelationTypeConnection
}

type QueueTypeConnection {
    "Contains the nodes in this connection."
    edges: [QueueTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `QueueType` and its cursor."
type QueueTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: QueueType
}

type UserQueueRelationType implements Node {
    dateJoined: DateTime!
    "The ID of the object"
    id: ID!
    queue: QueueType!
    user: UserType!
}

type UserQueueRelationTypeConnection {
    "Contains the nodes in this connection."
    edges: [UserQueueRelationTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `UserQueueRelationType` and its cursor."
type UserQueueRelationTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: UserQueueRelationType
}

type UserType implements Node {
    email: String!
    firstName: String!
    "The ID of the object"
    id: ID!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    lastName: String!
    "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
    username: String!
}

"""

The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime
